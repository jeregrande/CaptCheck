{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.tsx","App.tsx","index.tsx"],"names":["Difficulty","randomCategory","Math","floor","random","fetchQuizQuestions","amount","category","difficulty","a","endpoint","fetch","json","data","console","log","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","firstGame","setFirstGame","startQuiz","EASY","newQuestions","MEDIUM","HARD","undefined","e","currentTarget","prev","answerObject","length","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fad546b8.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard'\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, category: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    console.log(data);\r\n\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers, \r\n                question.correct_answer,\r\n        ]),\r\n    }))\r\n};","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5);\r\n\r\nexport const randomCategory = () => {\r\n    switch(Math.floor(Math.random() * 2)) {\r\n        case 0:\r\n            return 15;\r\n        default:\r\n            return 31;\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #DDDDDD;\r\n  border-radius: 10px;\r\n  border: 2px solid #DDDDDD;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? '#06c200'\r\n        : !correct && userClicked\r\n        ? '#e02f2f'\r\n        : '#777777'};\r\n    border: 3px solid #777777;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import React from 'react';\r\n//Styles \r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n//Types\r\nimport { AnswerObject } from '../App';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNum: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({ \r\n    question, \r\n    answers, \r\n    callback, \r\n    userAnswer, \r\n    questionNum, \r\n    totalQuestions \r\n}) => (\r\n    <Wrapper>\r\n        <p className='number'>\r\n            Question: {questionNum} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{ __html: question }} />\r\n        <div>\r\n            {answers.map((answer) => (\r\n                <ButtonWrapper \r\n                    key={answer}\r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}\r\n                >\r\n                    <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{ __html: answer}} />\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\r\n//@ts-ignore\r\n\r\nexport const GlobalStyle = createGlobalStyle `\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-color: #444444;\r\n        color: #555555;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Catamaran', sans-serif;\r\n    }\r\n\r\n    h3 {\r\n        color: #DDDDDD;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    > p {\r\n        color: #FFF;\r\n    }\r\n\r\n    .score {\r\n        color: #FFF;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Helvetica, sans-serif;\r\n        background-image: linear-gradient(180deg, #EEE, #EEE);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #333s);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .start, \r\n    .next {\r\n        cursor: pointer;\r\n        background: #504aff;\r\n        border: 2px solid #504aff;\r\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n        color: #DDDDDD;\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n`\r\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n//Components\nimport QuestionCard from './components/QuestionCard';\nimport { randomCategory } from './utils';\n//Types\nimport { QuestionState, Difficulty } from './API';\n//Stypes\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [firstGame, setFirstGame] = useState(true);\n\n  console.log(questions);\n  \n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n    setFirstGame(false);\n\n    var newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      randomCategory(),\n      Difficulty.EASY\n    );\n\n    switch(Math.floor(Math.random() * 3)) {\n      case 0:\n        newQuestions = await fetchQuizQuestions(\n          TOTAL_QUESTIONS,\n          randomCategory(),\n          Difficulty.EASY\n        );\n        break;\n      case 1:\n        newQuestions = await fetchQuizQuestions(\n          TOTAL_QUESTIONS,\n          randomCategory(),\n          Difficulty.MEDIUM\n        );\n        break;\n      default:\n        newQuestions = await fetchQuizQuestions(\n          TOTAL_QUESTIONS,\n          randomCategory(),\n          Difficulty.HARD\n        );\n    }\n\n  \n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //User answer\n      const answer = e.currentTarget.value;\n\n      //Compare user answer to correct answer\n      const correct = questions[number].correct_answer === answer;\n\n      //Increment score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n\n      //Apend answer into user answer array\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    // Move only if not on last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1>CaptCheck</h1>\n\n      {gameOver && !firstGame ? ( <p className=\"score\">Score: {score}</p>) : null}\n\n      {gameOver ? (\n        <button className=\"start\" onClick={startQuiz}>\n          Start\n        </button>\n       ) : null}\n\n      {!gameOver && !loading ? <p className=\"score\">Score: {score}</p> : null}\n\n      {loading && <p>Loading Questions...</p>}\n\n      {!loading && !gameOver && (\n        <QuestionCard \n          questionNum={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS ? (\n        <button className=\"next\" onClick={nextQuestion}>\n          Continue\n        </button>\n      ) : null}\n    </Wrapper>\n    </>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}